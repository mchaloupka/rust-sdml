/*!
One-line description.

More detailed description, with

# Example

YYYYY

*/

use crate::error::Error;
use crate::model::modules::Module;

// ------------------------------------------------------------------------------------------------
// Public Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

// TODO: what about those that need a model loader?

// TODO: interactive vs. API calls?

pub trait Validate {
    fn is_complete(&self, top: &Module) -> Result<bool, Error>;

    // Fail on first error
    fn is_valid(&self, check_constraints: bool, top: &Module) -> Result<bool, Error>;

    // Find all errors
    fn validate(
        &self,
        check_constraints: bool,
        top: &Module,
        errors: &mut Vec<Error>,
    ) -> Result<(), Error> {
        if let Err(e) = self.is_valid(check_constraints, top) {
            errors.push(e);
        }
        Ok(())
    }
}

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
